import { z } from 'zod';
import { Tool } from '@modelcontextprotocol/sdk/types.js';
import { YClientsApiClient } from '../yclients-client';
import {
  BookAppointmentRequest,
  BookAppointmentSchema,
  FindAvailableTimeRequest,
  FindAvailableTimeSchema,
} from '../types';
import {
  validateData,
  normalizePhone,
  validateFutureDate,
  formatDateTimeForYClients,
  findServiceByName,
  findStaffByName,
} from '../utils/validation';
import { formatErrorForUser, logError } from '../utils/errors';

export class BookingTools {
  constructor(private apiClient: YClientsApiClient) {}

  /**
   * –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ —É—Å–ª—É–≥—É
   */
  getBookAppointmentTool(): Tool {
    return {
      name: 'book_appointment',
      description: '–ó–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ —É—Å–ª—É–≥—É. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞—Å—Ç –∫–ª–∏–µ–Ω—Ç–∞, –Ω–∞–π–¥–µ—Ç —É—Å–ª—É–≥—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –ø—Ä–æ–≤–µ—Ä–∏—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏',
      inputSchema: {
        type: 'object',
        properties: {
          client_phone: {
            type: 'string',
            description: '–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX'
          },
          client_name: {
            type: 'string',
            description: '–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞'
          },
          service_name: {
            type: 'string',
            description: '–ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "—Å—Ç—Ä–∏–∂–∫–∞", "–æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏–µ", "–º–∞–Ω–∏–∫—é—Ä")'
          },
          preferred_date: {
            type: 'string',
            format: 'date',
            description: '–ñ–µ–ª–∞–µ–º–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD'
          },
          preferred_time: {
            type: 'string',
            description: '–ñ–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä: "15:00")'
          },
          master_name: {
            type: 'string',
            description: '–ò–º—è –º–∞—Å—Ç–µ—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)'
          },
          comment: {
            type: 'string',
            description: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–ø–∏—Å–∏'
          }
        },
        required: ['client_phone', 'client_name', 'service_name', 'preferred_date', 'preferred_time']
      }
    };
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞
   */
  async handleBookAppointment(args: unknown): Promise<string> {
    try {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const request = validateData(BookAppointmentSchema, args);
      
      // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      const normalizedPhone = normalizePhone(request.client_phone);
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã
      if (!validateFutureDate(request.preferred_date)) {
        return formatErrorForUser(new Error('–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ —Ä–∞–Ω–µ–µ —Å–µ–≥–æ–¥–Ω—è'));
      }

      // 1. –ü–æ–∏—Å–∫ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
      let client = await this.apiClient.findClientByPhone(normalizedPhone);
      
      if (!client) {
        client = await this.apiClient.createClient({
          name: request.client_name,
          phone: normalizedPhone,
          comment: request.comment,
        });
      }

      // 2. –ü–æ–∏—Å–∫ —É—Å–ª—É–≥–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
      const services = await this.apiClient.getServices();
      const activeServices = services.filter(s => s.active === 1);
      const foundServices = findServiceByName(activeServices, request.service_name);
      
      if (foundServices.length === 0) {
        return `‚ùå –£—Å–ª—É–≥–∞ "${request.service_name}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏: ${activeServices.map(s => s.title).join(', ')}`;
      }
      
      if (foundServices.length > 1) {
        return `‚ùå –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Å–ª—É–≥ –ø–æ –∑–∞–ø—Ä–æ—Å—É "${request.service_name}": ${foundServices.map(s => s.title).join(', ')}. –£—Ç–æ—á–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏.`;
      }
      
      const service = foundServices[0];

      // 3. –ü–æ–∏—Å–∫ –º–∞—Å—Ç–µ—Ä–∞ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
      let selectedStaff = null;
      const allStaff = await this.apiClient.getStaff();
      
      if (request.master_name) {
        const foundStaff = findStaffByName(allStaff, request.master_name);
        
        if (foundStaff.length === 0) {
          return `‚ùå –ú–∞—Å—Ç–µ—Ä "${request.master_name}" –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Å—Ç–µ—Ä–∞: ${allStaff.map(s => s.name).join(', ')}`;
        }
        
        if (foundStaff.length > 1) {
          return `‚ùå –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∞—Å—Ç–µ—Ä–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É "${request.master_name}": ${foundStaff.map(s => s.name).join(', ')}. –£—Ç–æ—á–Ω–∏—Ç–µ –∏–º—è –º–∞—Å—Ç–µ—Ä–∞.`;
        }
        
        selectedStaff = foundStaff[0];
      } else {
        // –ù–∞—Ö–æ–¥–∏–º –º–∞—Å—Ç–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç—É —É—Å–ª—É–≥—É
        const availableStaff = allStaff.filter(staff => 
          !staff.services || staff.services.includes(service.id)
        );
        
        if (availableStaff.length === 0) {
          return `‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è —É—Å–ª—É–≥–∏ "${service.title}"`;
        }
        
        selectedStaff = availableStaff[0]; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ
      }

      // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–∏
      const datetime = formatDateTimeForYClients(request.preferred_date, request.preferred_time);
      const isAvailable = await this.apiClient.checkTimeAvailability(
        selectedStaff.id,
        service.id,
        datetime
      );
      
      if (!isAvailable) {
        // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è
        const availableTimeResult = await this.handleFindAvailableTime({
          service_name: request.service_name,
          date_from: request.preferred_date,
          date_to: request.preferred_date,
          master_name: selectedStaff.name,
        });
        
        return `‚ùå –í—Ä–µ–º—è ${request.preferred_time} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ ${request.preferred_date}.\n\n${availableTimeResult}`;
      }

      // 5. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
      const booking = await this.apiClient.createBooking({
        company_id: parseInt(process.env.YCLIENTS_COMPANY_ID || '0'),
        staff_id: selectedStaff.id,
        services: [{
          id: service.id,
          title: service.title,
          cost: service.price_min,
          cost_per_unit: service.price_min,
          first_cost: service.price_min,
          amount: 1,
          discount: 0,
        }],
        client: {
          id: client.id!,
          name: client.name,
          phone: client.phone,
          email: client.email,
        },
        datetime,
        seance_length: service.duration,
        comment: request.comment,
        save_if_busy: false,
      });

      return `‚úÖ –ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!
      
üìã –î–µ—Ç–∞–ª–∏ –∑–∞–ø–∏—Å–∏:
‚Ä¢ –ö–ª–∏–µ–Ω—Ç: ${client.name} (${client.phone})
‚Ä¢ –£—Å–ª—É–≥–∞: ${service.title}
‚Ä¢ –ú–∞—Å—Ç–µ—Ä: ${selectedStaff.name}
‚Ä¢ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: ${request.preferred_date} ${request.preferred_time}
‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${service.duration} –º–∏–Ω—É—Ç
‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: –æ—Ç ${service.price_min} —Ä—É–±.
‚Ä¢ ID –∑–∞–ø–∏—Å–∏: ${booking.id}
${request.comment ? `‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${request.comment}` : ''}`;

    } catch (error) {
      logError(error, 'BookAppointment');
      return formatErrorForUser(error);
    }
  }

  /**
   * –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
   */
  getFindAvailableTimeTool(): Tool {
    return {
      name: 'find_available_time',
      description: '–ù–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Å–ª—É–≥—É',
      inputSchema: {
        type: 'object',
        properties: {
          service_name: {
            type: 'string',
            description: '–ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏'
          },
          date_from: {
            type: 'string',
            format: 'date',
            description: '–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –ø–æ–∏—Å–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD'
          },
          date_to: {
            type: 'string',
            format: 'date',
            description: '–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –ø–æ–∏—Å–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD'
          },
          master_name: {
            type: 'string',
            description: '–ò–º—è –º–∞—Å—Ç–µ—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)'
          }
        },
        required: ['service_name', 'date_from', 'date_to']
      }
    };
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
   */
  async handleFindAvailableTime(args: unknown): Promise<string> {
    try {
      const request = validateData(FindAvailableTimeSchema, args);
      
      // –ü–æ–∏—Å–∫ —É—Å–ª—É–≥–∏
      const services = await this.apiClient.getServices();
      const activeServices = services.filter(s => s.active === 1);
      const foundServices = findServiceByName(activeServices, request.service_name);
      
      if (foundServices.length === 0) {
        return `‚ùå –£—Å–ª—É–≥–∞ "${request.service_name}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`;
      }
      
      const service = foundServices[0];
      
      // –ü–æ–∏—Å–∫ –º–∞—Å—Ç–µ—Ä–æ–≤
      const allStaff = await this.apiClient.getStaff();
      let targetStaff = allStaff;
      
      if (request.master_name) {
        const foundStaff = findStaffByName(allStaff, request.master_name);
        if (foundStaff.length === 0) {
          return `‚ùå –ú–∞—Å—Ç–µ—Ä "${request.master_name}" –Ω–µ –Ω–∞–π–¥–µ–Ω`;
        }
        targetStaff = foundStaff;
      } else {
        // –§–∏–ª—å—Ç—Ä—É–µ–º –º–∞—Å—Ç–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å —É—Å–ª—É–≥—É
        targetStaff = allStaff.filter(staff => 
          !staff.services || staff.services.includes(service.id)
        );
      }
      
      if (targetStaff.length === 0) {
        return `‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è —É—Å–ª—É–≥–∏ "${service.title}"`;
      }

      // –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
      const availableSlots: Array<{
        date: string;
        time: string;
        master: string;
      }> = [];

      const startDate = new Date(request.date_from);
      const endDate = new Date(request.date_to);
      
      for (const staff of targetStaff) {
        for (let d = new Date(startDate); d <= endDate; d.setDate(d.getDate() + 1)) {
          const dateStr = d.toISOString().split('T')[0];
          
          try {
            const schedule = await this.apiClient.getAvailableTime(
              staff.id,
              service.id,
              dateStr
            );
            
            for (const timeSlot of schedule.times) {
              availableSlots.push({
                date: dateStr,
                time: timeSlot.time,
                master: staff.name,
              });
            }
          } catch (error) {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–Ω–∏ –±–µ–∑ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            continue;
          }
        }
      }

      if (availableSlots.length === 0) {
        return `‚ùå –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —É—Å–ª—É–≥–∏ "${service.title}" –≤ –ø–µ—Ä–∏–æ–¥ —Å ${request.date_from} –ø–æ ${request.date_to}`;
      }

      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º
      const slotsByDate = availableSlots.reduce((acc, slot) => {
        if (!acc[slot.date]) {
          acc[slot.date] = [];
        }
        acc[slot.date].push(slot);
        return acc;
      }, {} as Record<string, typeof availableSlots>);

      let result = `üìÖ –î–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Å–ª—É–≥–∏ "${service.title}":\n\n`;
      
      Object.entries(slotsByDate)
        .sort(([a], [b]) => a.localeCompare(b))
        .slice(0, 7) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 7 –¥–Ω–µ–π
        .forEach(([date, slots]) => {
          result += `üóì ${date}:\n`;
          slots
            .sort((a, b) => a.time.localeCompare(b.time))
            .slice(0, 10) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10 —Å–ª–æ—Ç–æ–≤ –Ω–∞ –¥–µ–Ω—å
            .forEach(slot => {
              result += `   ‚Ä¢ ${slot.time} - ${slot.master}\n`;
            });
          result += '\n';
        });

      return result;

    } catch (error) {
      logError(error, 'FindAvailableTime');
      return formatErrorForUser(error);
    }
  }
} 