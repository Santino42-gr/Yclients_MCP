import { z } from 'zod';
import { Tool } from '@modelcontextprotocol/sdk/types.js';
import { YClientsApiClient } from '../yclients-client';
import { validateData, normalizePhone } from '../utils/validation';
import { formatErrorForUser, logError } from '../utils/errors';

export class ClientTools {
  constructor(private apiClient: YClientsApiClient) {}

  /**
   * –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞
   */
  getFindClientTool(): Tool {
    return {
      name: 'find_client',
      description: '–ù–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É',
      inputSchema: {
        type: 'object',
        properties: {
          phone: {
            type: 'string',
            description: '–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞'
          }
        },
        required: ['phone']
      }
    };
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞
   */
  async handleFindClient(args: unknown): Promise<string> {
    try {
      const schema = z.object({
        phone: z.string(),
      });
      
      const request = validateData(schema, args);
      const normalizedPhone = normalizePhone(request.phone);
      
      const client = await this.apiClient.findClientByPhone(normalizedPhone);
      
      if (!client) {
        return `‚ùå –ö–ª–∏–µ–Ω—Ç —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º ${normalizedPhone} –Ω–µ –Ω–∞–π–¥–µ–Ω`;
      }

      return `üë§ –ù–∞–π–¥–µ–Ω –∫–ª–∏–µ–Ω—Ç:
‚Ä¢ –ò–º—è: ${client.name}
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: ${client.phone}
‚Ä¢ Email: ${client.email || '–Ω–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ ID: ${client.id}
${client.comment ? `‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${client.comment}` : ''}`;

    } catch (error) {
      logError(error, 'FindClient');
      return formatErrorForUser(error);
    }
  }

  /**
   * –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –∫–ª–∏–µ–Ω—Ç–∞
   */
  getClientBookingsTool(): Tool {
    return {
      name: 'get_client_bookings',
      description: '–ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É',
      inputSchema: {
        type: 'object',
        properties: {
          phone: {
            type: 'string',
            description: '–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞'
          },
          date_from: {
            type: 'string',
            format: 'date',
            description: '–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –ø–æ–∏—Å–∫–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)'
          },
          date_to: {
            type: 'string',
            format: 'date',
            description: '–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –ø–æ–∏—Å–∫–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)'
          }
        },
        required: ['phone']
      }
    };
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –∫–ª–∏–µ–Ω—Ç–∞
   */
  async handleGetClientBookings(args: unknown): Promise<string> {
    try {
      const schema = z.object({
        phone: z.string(),
        date_from: z.string().optional(),
        date_to: z.string().optional(),
      });
      
      const request = validateData(schema, args);
      const normalizedPhone = normalizePhone(request.phone);
      
      // –°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–µ–º –∫–ª–∏–µ–Ω—Ç–∞
      const client = await this.apiClient.findClientByPhone(normalizedPhone);
      
      if (!client) {
        return `‚ùå –ö–ª–∏–µ–Ω—Ç —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º ${normalizedPhone} –Ω–µ –Ω–∞–π–¥–µ–Ω`;
      }

      // –ü–æ–ª—É—á–∏–º –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞
      const bookings = await this.apiClient.getClientBookings(
        client.id!,
        request.date_from,
        request.date_to
      );

      if (bookings.length === 0) {
        return `üìÖ –£ –∫–ª–∏–µ–Ω—Ç–∞ ${client.name} (${client.phone}) –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–µ—Ä–∏–æ–¥–µ`;
      }

      let result = `üìÖ –ó–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞ ${client.name} (${client.phone}):\n\n`;
      
      bookings
        .sort((a, b) => new Date(a.datetime).getTime() - new Date(b.datetime).getTime())
        .forEach((booking, index) => {
          const date = new Date(booking.datetime);
          const formattedDate = date.toLocaleDateString('ru-RU');
          const formattedTime = date.toLocaleTimeString('ru-RU', { 
            hour: '2-digit', 
            minute: '2-digit' 
          });
          
          const status = booking.attendance === 1 ? '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ' 
                      : booking.attendance === 2 ? '‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ'
                      : '‚è≥ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ';

          result += `${index + 1}. ${formattedDate} ${formattedTime}\n`;
          result += `   üìã –£—Å–ª—É–≥–∏: ${booking.services.map(s => s.title).join(', ')}\n`;
          result += `   üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${booking.services.reduce((sum, s) => sum + s.cost, 0)} —Ä—É–±.\n`;
          result += `   ‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${booking.seance_length} –º–∏–Ω.\n`;
          result += `   üìä –°—Ç–∞—Ç—É—Å: ${status}\n`;
          result += `   üÜî ID –∑–∞–ø–∏—Å–∏: ${booking.id}\n`;
          if (booking.comment) {
            result += `   üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${booking.comment}\n`;
          }
          result += '\n';
        });

      return result;

    } catch (error) {
      logError(error, 'GetClientBookings');
      return formatErrorForUser(error);
    }
  }

  /**
   * –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏
   */
  getCancelBookingTool(): Tool {
    return {
      name: 'cancel_booking',
      description: '–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –∫–ª–∏–µ–Ω—Ç–∞',
      inputSchema: {
        type: 'object',
        properties: {
          booking_id: {
            type: 'number',
            description: 'ID –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã'
          }
        },
        required: ['booking_id']
      }
    };
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏
   */
  async handleCancelBooking(args: unknown): Promise<string> {
    try {
      const schema = z.object({
        booking_id: z.number(),
      });
      
      const request = validateData(schema, args);
      
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏
      const booking = await this.apiClient.getBooking(request.booking_id);
      
      // –û—Ç–º–µ–Ω–∏–º –∑–∞–ø–∏—Å—å
      await this.apiClient.cancelBooking(request.booking_id);
      
      const date = new Date(booking.datetime);
      const formattedDate = date.toLocaleDateString('ru-RU');
      const formattedTime = date.toLocaleTimeString('ru-RU', { 
        hour: '2-digit', 
        minute: '2-digit' 
      });

      return `‚úÖ –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!

üìã –û—Ç–º–µ–Ω–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å:
‚Ä¢ –ö–ª–∏–µ–Ω—Ç: ${booking.client.name} (${booking.client.phone})
‚Ä¢ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: ${formattedDate} ${formattedTime}
‚Ä¢ –£—Å–ª—É–≥–∏: ${booking.services.map(s => s.title).join(', ')}
‚Ä¢ ID –∑–∞–ø–∏—Å–∏: ${booking.id}`;

    } catch (error) {
      logError(error, 'CancelBooking');
      return formatErrorForUser(error);
    }
  }
} 