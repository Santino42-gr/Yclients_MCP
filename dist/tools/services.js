"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServiceTools = void 0;
const errors_1 = require("../utils/errors");
class ServiceTools {
    apiClient;
    constructor(apiClient) {
        this.apiClient = apiClient;
    }
    /**
     * –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥
     */
    getServicesListTool() {
        return {
            name: 'get_services_list',
            description: '–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥ —Å–∞–ª–æ–Ω–∞',
            inputSchema: {
                type: 'object',
                properties: {},
                required: []
            }
        };
    }
    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥
     */
    async handleGetServicesList() {
        try {
            const services = await this.apiClient.getServices();
            const activeServices = services.filter(s => s.active === 1);
            if (activeServices.length === 0) {
                return '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥';
            }
            let result = 'üìã –°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ —Å–∞–ª–æ–Ω–∞:\n\n';
            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –µ—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            const servicesByCategory = activeServices.reduce((acc, service) => {
                const categoryId = service.category_id || 0;
                if (!acc[categoryId]) {
                    acc[categoryId] = [];
                }
                acc[categoryId].push(service);
                return acc;
            }, {});
            Object.entries(servicesByCategory).forEach(([categoryId, categoryServices]) => {
                if (categoryId !== '0') {
                    result += `üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è ${categoryId}:\n`;
                }
                categoryServices
                    .sort((a, b) => a.title.localeCompare(b.title))
                    .forEach(service => {
                    result += `‚Ä¢ ${service.title}\n`;
                    result += `  üí∞ –¶–µ–Ω–∞: ${service.price_min === service.price_max
                        ? `${service.price_min} —Ä—É–±.`
                        : `–æ—Ç ${service.price_min} –¥–æ ${service.price_max} —Ä—É–±.`}\n`;
                    result += `  ‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${service.duration} –º–∏–Ω.\n`;
                    result += `  üÜî ID: ${service.id}\n\n`;
                });
            });
            return result;
        }
        catch (error) {
            (0, errors_1.logError)(error, 'GetServicesList');
            return (0, errors_1.formatErrorForUser)(error);
        }
    }
    /**
     * –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–∞—Å—Ç–µ—Ä–æ–≤
     */
    getStaffListTool() {
        return {
            name: 'get_staff_list',
            description: '–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ —Å–∞–ª–æ–Ω–∞',
            inputSchema: {
                type: 'object',
                properties: {},
                required: []
            }
        };
    }
    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–∞—Å—Ç–µ—Ä–æ–≤
     */
    async handleGetStaffList() {
        try {
            const staff = await this.apiClient.getStaff();
            if (staff.length === 0) {
                return '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤';
            }
            let result = 'üë• –°–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä–æ–≤ —Å–∞–ª–æ–Ω–∞:\n\n';
            staff
                .sort((a, b) => a.name.localeCompare(b.name))
                .forEach((master, index) => {
                result += `${index + 1}. ${master.name}\n`;
                if (master.specialization) {
                    result += `   üéØ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: ${master.specialization}\n`;
                }
                if (master.position?.title) {
                    result += `   üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: ${master.position.title}\n`;
                }
                result += `   üÜî ID: ${master.id}\n`;
                if (master.services && master.services.length > 0) {
                    result += `   üõ† –£—Å–ª—É–≥–∏: ${master.services.length} —É—Å–ª—É–≥\n`;
                }
                result += '\n';
            });
            return result;
        }
        catch (error) {
            (0, errors_1.logError)(error, 'GetStaffList');
            return (0, errors_1.formatErrorForUser)(error);
        }
    }
}
exports.ServiceTools = ServiceTools;
//# sourceMappingURL=services.js.map